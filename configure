#!/bin/bash
#
#    This file is a part of Clarity vector icon theme for gtk
#    Copyright (c) 2010-2018 Jakub Jankiewicz <http://jcubic.pl/me>
#
#    Licensed under CC-BY-SA 3.0 license
#

RULES_FILE=src/compound_icons_rules
ERROR=false
echo "Checking Dependencies"
fail=1
for command in make rsvg-convert zenity sed grep; do
    echo -n "$command ... "
    command -v $command >/dev/null 2>&1
    if (( $? == 0 )); then
        echo -e "[\x1b[32m\x1b[1mOK\x1b[0m]"
    else
        echo -e "[\x1b[31m\x1b[1mFAIL\x1b[0m]"
        echo "You need to install $command"
        fail=0
    fi
done


function install() {
    echo -e "\t@test -d ${1}usr/share/icons/Clarity || mkdir ${1}usr/share/icons/Clarity"
    for i in configure index.theme Makefile build README change-theme; do
      echo -e "\t@cp $i ${1}usr/share/icons/Clarity"
    done
    for name in static src scalable 16x16; do
      echo -e "\t@cp -r $name ${1}usr/share/icons/Clarity"
    done
}


if [ $fail = 0 ]; then
    exit 1
fi
echo "Generating Makefile"
{
    echo "# This is generated Makefile from Clarity Vector Icon Theme for GTK"
    echo "#"
    echo "# Copyright (c) 2010-2018 Jakub Jankiewicz <http://jcubic.pl/me>"
    echo "# Licensed under CC-BY-SA 3.0 license"
    echo "#"
    echo "# This file was automaticly generated by configure script"
    echo "# Don't modified it, if you want to do some changes, do this"
    echo "# in configure script"
    echo "#"
    echo "SHELL := /bin/bash"
    echo "DIR=\`pwd | sed 's%.*/%%'\`"
    echo "SYMLINKS=grep -v '^\\#' src/symlinks | tr -d '\\r' | grep -v '^ *\$\$'"
    echo "COPIES=grep -v '^\\#' src/copies | tr -d '\\r' | grep -v '^ *\$\$'"
    echo "SKIP=\`grep -v '^\\#' src/16x16_exceptions | tr -d '\\r' | grep -v '^ *\$\$' | paste -sd '|' - | sed -e 's/.*/(&)/'\`"
    echo
    echo "ALL: canus"
    echo
    echo "scalable:"
    echo -e "\t@test -d scalable || mkdir scalable"
    for dir in actions apps categories devices distributor-logos emblems mimetypes places status stock; do
        echo -e "\t@test -d scalable/$dir || mkdir scalable/$dir"
    done
    echo
    echo "symlinks: scalable src/symlinks"
    echo -e "\t@sed 's/^\\(.*\\) \\(.*\\)/echo symlink \2; ln -sf &/g' <(\$(SYMLINKS)) | bash"
    echo
    echo "copies:"
    echo -e "\t@sed 's/^/cp /g' <(\$(COPIES)) | bash"
    echo
    echo 'static-files:'
    echo -e "\t@bash -c \"find static -type f | sed -e 's/[^\/]*\/\(.*\)/echo copy scalable\/\1;cp & scalable\/\1/' | bash\""
    #defined themes rules
    for i in src/template_*.svg; do
        echo
        name=`echo $i | sed -e 's/.*template_\([^\.]*\).*/\1/'`
        echo -n "Process template $name ... " > /dev/stderr
        echo ${name}: symlinks static-files gen_$name elements copies _16x16
        echo
        echo gen_${name}:
        echo -e "\t@echo 'Building icons for theme $name ... '"
        echo -e "\t@bash -c 'for i in \`find src -mindepth 2 -name \"*.svg\" -type f\`; do \\"
        echo -e "./build ${name} \$\$i;\\"
        echo -e "echo building \`echo \$\$i | sed -e \"s/src/scalable/\"\`;\\"
        echo "done;'"
        echo -e "[\x1b[32m\x1b[1mOK\x1b[0m]" > /dev/stderr
    done
    echo
    echo "elements: scalable"
    echo -e "\t@echo -n 'building additional icons ... '"

    IFS=$'\n'
    line=0
    echo -n "Process compound icons rules ... " > /dev/stderr
    for i in $(grep -v '^#' $RULES_FILE | tr -d '\r' | grep -v '^ *$'); do
        if $(echo $i | grep -e ".*\.svg *=.*\+.*" > /dev/null); then
            desc=$(echo $i | sed -e 's/\([^= ]*\) *=.*/\1/')
            source=$(echo $i | sed -e 's/[^=]*= *\([^ ]*\) *\+.*/\1/')
            element=$(echo $i | sed -e 's/.*+ *\(.*\) *$/\1/')
            if [ ! -e src/$element ]; then
                {
                    echo -e "[\x1b[31m\x1b[1mFAIL\x1b[0m]"
                    echo "ERROR in $RULES_FILE"
                    echo "file src/$element don't exists"
                    echo "line: $i"
                } > /dev/stderr
                exit;
            else
                echo -e "\t@sed -e \"s%</svg>%\`grep 'id=\\\"shape\\\"' src/$element\`\\\\n</svg>%\" scalable/$source > scalable/$desc;"
                echo -e "\t@echo \"building scalable/$desc\""
            fi
        else
            {
                echo -e "[\x1b[31m\x1b[1mFAIL\x1b[0m]"
                echo "ERROR in $RULES_FILE"
                echo "line: $i"

            } > /dev/stderr
            exit
        fi
        (( line++ ))
    done
    echo -e "[\x1b[32m\x1b[1mOK\x1b[0m]" > /dev/stderr
    echo -n "Generating distribution rules ... " > /dev/stderr
    for i in `cd src/distributor-logos; ls *`; do
        echo -e "$i:" | sed -e 's/\.svg//'
        echo -e "\tln -sf ../distributor-logos/$i scalable/places/start-here.svg"
        echo -e "\tln -sf ../distributor-logos/$i scalable/places/gnome-main-menu.svg"
        echo -e "\tln -sf ../distributor-logos/$i scalable/places/distributor-logo.svg"
        echo -e "\tln -sf ../distributor-logos/${i/svg/png} 16x16/apps/xfce4_xicon1.svg"
        echo -e "\tln -sf ../distributor-logos/${i/svg/png} 16x16/places/start-here.png"
        echo -e "\tln -sf ../distributor-logos/${i/svg/png} 16x16/places/gnome-main-menu.png"
        echo -e "\tln -sf ../distributor-logos/${i/svg/png} 16x16/places/distributor-logo.png"
        echo -e "\tln -sf ../distributor-logos/${i/svg/png} 16x16/apps/xfce4_xicon1.png"
        echo
    done
        echo -ne "[\x1b[32m\x1b[1mOK\x1b[0m]\nGenerating simple test ... " > /dev/stderr
    echo
    echo '_16x16: scalable elements'
    echo -e "\t@echo -n 'creating 16x16 symlinks '"
    echo -e "\t@test -d 16x16 || mkdir 16x16"
    for dir in `cd src && ls -d */`; do
        echo -e "\t@test -d 16x16/$dir || mkdir 16x16/$dir"
    done
    echo -e "\t@sed -e 's/\.svg/\.png/g' -e 's/scalable/16x16/g' -e 's/^\\(.*\\) \\(.*\\)/echo symlink \2; ln -sf &/g' <(\$(SYMLINKS)) | grep -vE \$(SKIP) | bash"
    echo -e "\t@echo -n"
    echo -e "\t@find scalable/ -type f | sed -e 's/scalable\(.*\)svg/echo building 16x16\1png; rsvg-convert -w 16 -h 16 & > 16x16\1png/' | bash"
    echo -e "\t@sed -e 's/\.svg/\.png/g' -e 's/scalable/16x16/g' -e 's/^\\(.*\\) \\(.*\\)/echo copy \2; cp &/g' <(\$(COPIES)) | grep -vE \$(SKIP) | bash"
    echo -e "\t@echo -n"
    echo
    echo '_symlinks:'
    echo -e "\t@test -d scalable || ( echo \"folder scalable doesn't exists\"; false )"
    echo -e "\t@./symlink-file > src/symlinks"
    echo
    echo "clean:"
    echo -e "\t@echo cleaning..."
    echo -e "\t@test -d scalable && rm -r scalable || true"
    echo -e "\t@test -d Clarity && rm -r Clarity || true"
    echo -e "\t@test -d 16x16 && rm -r 16x16 || true"
    echo -e "\t@bash -c 'for i in \`find . -name \"*-stamp\"\`; do rm \$\$i; done'"
    #test rule
    echo
    echo "install-deb:"
    install debian/clarity-icon-theme/
    echo
    echo "install:"
    install /
    echo
    echo "source-deb:"
    echo -e "\tdebuild -S"
    echo
    echo "deb:"
    echo -e "\tdpkg-buildpackage -rfakeroot"
    echo -e "[\x1b[32m\x1b[1mOK\x1b[0m]" > /dev/stderr
    echo
    echo "tar.gz:"
    echo -e "\t@test -d Clarity && true || mkdir Clarity"
    for path in scalable static src build change-theme configure Makefile index.theme README; do
        echo -e "\tcp -r $path Clarity/"
    done
    echo -e "\ttar czvf ../\${DIR}.tar.gz Clarity"
    echo -e "\trm -r Clarity"

} > Makefile

echo -e "\nMakefile generated, now you can run 'make' to create your icons\n"
